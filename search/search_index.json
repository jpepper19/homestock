{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to homestock","text":"<p>homestock scrapes US Census Bureau data to calculate attainable housing stock for each census tract within a selected county.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://jpepper19.github.io/homestock</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#homestock.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>homestock/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/jpepper19/homestock/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>homestock could always use more documentation, whether as part of the official homestock docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/jpepper19/homestock/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up homestock for local development.</p> <ol> <li> <p>Fork the homestock repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/homestock.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv homestock\n$ cd homestock/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 homestock tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/jpepper19/homestock/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install homestock, run this command in your terminal:</p> <pre><code>pip install homestock\n</code></pre> <p>This is the preferred method to install homestock, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install homestock from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/jpepper19/homestock\n</code></pre>"},{"location":"map_folium/","title":"Map folium","text":"<p>homestock module</p> In\u00a0[1]: Copied! <pre>import folium\nimport geopandas as gpd\nimport os\n</pre> import folium import geopandas as gpd import os In\u00a0[2]: Copied! <pre>class Map:\n    \"\"\"\n    A custom folium-based map class for the homestock package,\n    supporting basemaps, layer control, and vector data visualization.\n    \"\"\"\n\n    def __init__(self, location=(0, 0), zoom_start=2):\n        \"\"\"\n        Initialize the Map.\n\n        Parameters:\n        ----------\n        location : tuple\n            Center of the map in (lat, lon).\n        zoom_start : int\n            Initial zoom level.\n        \"\"\"\n        self.map = folium.Map(location=location, zoom_start=zoom_start)\n        self._layers = []\n\n    def add_basemap(self, basemap_name: str):\n        \"\"\"\n        Add a basemap to the map.\n\n        Parameters:\n        ----------\n        basemap_name : str\n            Name of the basemap. Supported values:\n            \"OpenStreetMap\", \"Esri.WorldImagery\", \"OpenTopoMap\".\n\n        Returns:\n        -------\n        None\n        \"\"\"\n        tile_dict = {\n            \"OpenStreetMap\": \"OpenStreetMap\",\n            \"Esri.WorldImagery\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n            \"OpenTopoMap\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\",\n        }\n\n        attr_dict = {\n            \"Esri.WorldImagery\": \"Tiles \u00a9 Esri \u2014 Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye\",\n            \"OpenTopoMap\": \"\u00a9 OpenTopoMap (CC-BY-SA)\",\n        }\n\n        if basemap_name not in tile_dict:\n            raise ValueError(f\"Unsupported basemap '{basemap_name}'.\")\n\n        tile_url = tile_dict[basemap_name]\n        attr = attr_dict.get(basemap_name, basemap_name)\n\n        tile_layer = folium.TileLayer(tiles=tile_url, attr=attr, name=basemap_name)\n        tile_layer.add_to(self.map)\n        self._layers.append(tile_layer)\n\n    def add_layer_control(self):\n        \"\"\"\n        Add a layer control widget to the map.\n\n        Returns:\n        -------\n        None\n        \"\"\"\n        folium.LayerControl().add_to(self.map)\n\n    def add_vector(self, data, layer_name=\"Vector Layer\"):\n        \"\"\"\n        Add vector data to the map. Accepts file paths or GeoDataFrames.\n\n        Parameters:\n        ----------\n        data : str or geopandas.GeoDataFrame\n            Path to the vector data file or a GeoDataFrame.\n        layer_name : str\n            Name of the layer to display.\n\n        Returns:\n        -------\n        None\n        \"\"\"\n        if isinstance(data, str):\n            if not os.path.exists(data):\n                raise FileNotFoundError(f\"File '{data}' not found.\")\n            gdf = gpd.read_file(data)\n        elif isinstance(data, gpd.GeoDataFrame):\n            gdf = data\n        else:\n            raise TypeError(\"Data must be a file path or a GeoDataFrame.\")\n\n        geojson = folium.GeoJson(gdf, name=layer_name)\n        geojson.add_to(self.map)\n        self._layers.append(geojson)\n\n    def display(self):\n        \"\"\"\n        Return the folium map object for display in Jupyter.\n\n        Returns:\n        -------\n        folium.Map\n        \"\"\"\n        return self.map\n</pre> class Map:     \"\"\"     A custom folium-based map class for the homestock package,     supporting basemaps, layer control, and vector data visualization.     \"\"\"      def __init__(self, location=(0, 0), zoom_start=2):         \"\"\"         Initialize the Map.          Parameters:         ----------         location : tuple             Center of the map in (lat, lon).         zoom_start : int             Initial zoom level.         \"\"\"         self.map = folium.Map(location=location, zoom_start=zoom_start)         self._layers = []      def add_basemap(self, basemap_name: str):         \"\"\"         Add a basemap to the map.          Parameters:         ----------         basemap_name : str             Name of the basemap. Supported values:             \"OpenStreetMap\", \"Esri.WorldImagery\", \"OpenTopoMap\".          Returns:         -------         None         \"\"\"         tile_dict = {             \"OpenStreetMap\": \"OpenStreetMap\",             \"Esri.WorldImagery\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",             \"OpenTopoMap\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\",         }          attr_dict = {             \"Esri.WorldImagery\": \"Tiles \u00a9 Esri \u2014 Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye\",             \"OpenTopoMap\": \"\u00a9 OpenTopoMap (CC-BY-SA)\",         }          if basemap_name not in tile_dict:             raise ValueError(f\"Unsupported basemap '{basemap_name}'.\")          tile_url = tile_dict[basemap_name]         attr = attr_dict.get(basemap_name, basemap_name)          tile_layer = folium.TileLayer(tiles=tile_url, attr=attr, name=basemap_name)         tile_layer.add_to(self.map)         self._layers.append(tile_layer)      def add_layer_control(self):         \"\"\"         Add a layer control widget to the map.          Returns:         -------         None         \"\"\"         folium.LayerControl().add_to(self.map)      def add_vector(self, data, layer_name=\"Vector Layer\"):         \"\"\"         Add vector data to the map. Accepts file paths or GeoDataFrames.          Parameters:         ----------         data : str or geopandas.GeoDataFrame             Path to the vector data file or a GeoDataFrame.         layer_name : str             Name of the layer to display.          Returns:         -------         None         \"\"\"         if isinstance(data, str):             if not os.path.exists(data):                 raise FileNotFoundError(f\"File '{data}' not found.\")             gdf = gpd.read_file(data)         elif isinstance(data, gpd.GeoDataFrame):             gdf = data         else:             raise TypeError(\"Data must be a file path or a GeoDataFrame.\")          geojson = folium.GeoJson(gdf, name=layer_name)         geojson.add_to(self.map)         self._layers.append(geojson)      def display(self):         \"\"\"         Return the folium map object for display in Jupyter.          Returns:         -------         folium.Map         \"\"\"         return self.map"},{"location":"usage/","title":"Usage","text":"<p>To use homestock in a project:</p> <pre><code>import homestock\n</code></pre>"}]}